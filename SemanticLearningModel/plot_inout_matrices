import numpy as np
import pandas as pd
import re
import os
import glob
from ast import literal_eval
import matplotlib.pyplot as plt
import matplotlib
import matplotlib.colors as colors

""" custom functions for plotting here"""

# custom function for the cmap
from matplotlib.pyplot import ylabel



def truncate_colormap(cmap, minval=0.0, maxval=1.0, n=100):
    new_cmap = colors.LinearSegmentedColormap.from_list(
        'trunc({n},{a:.2f},{b:.2f})'.format(n=cmap.name, a=minval, b=maxval),
        cmap(np.linspace(minval, maxval, n)))
    return new_cmap


def plot_inout_matrix(in_out_matrix, fig_name, fig_title, unit_str, increment):
    # Define figure
    fig, axes = plt.subplots(2, 4, figsize=(10, 8), dpi=300, facecolor='w')
    cmap = plt.get_cmap('bwr')
    new_cmap = truncate_colormap(cmap,0.5, 1)

    # Average per bloc
    for i, ax in enumerate(axes.flatten()):
        im = ax.matshow(in_out_matrix[:,:,i * increment], cmap=new_cmap)  # we substract 3/7 for our chance level

    # remove the ticks and make tick labels
    y_tick_labels = ['Derd','Lorp','Reng','Stad', 'Blap', 'Culp', 'Wost']
    x_tick_labels = ['Class 1/2', 'Class 3/4', 'Class 5/6', 'Class 7/8']

    for i, ax in enumerate(axes.flatten()):
        
        ax.set_title(unit_str + " " + str(i* increment+1), fontweight='bold', fontsize = 10)

        # make grid
        ax.set_xticks(np.arange(-.5, len(x_tick_labels)), minor=True)
        ax.set_yticks(np.arange(-.5, len(y_tick_labels)), minor=True)
        # Gridlines based on minor ticks
        ax.grid(which='minor', color='k', linestyle='-', linewidth=1)

        # remove ticks
        ax.tick_params(which='both', left=False, right=False, top=False, bottom=False, pad=1)

        ax.set_xticks(range(len(x_tick_labels)))
        ax.set_xticklabels(x_tick_labels, rotation= -45, fontsize=6, ha="left", rotation_mode="anchor")

        if i % 4 == 0:
            ax.set_ylabel("Properties",fontweight='bold', fontsize = 12)
            ax.set_yticks(range(len(y_tick_labels)))
            ax.set_yticklabels(y_tick_labels, fontsize=7)
            ax.tick_params(labeltop=False, labelbottom = True)

        else:
            ax.tick_params(labelleft=False, labeltop=False, labelbottom = True)

    # add a supertitle
    fig.suptitle(fig_title, fontweight='bold', fontsize = 16)
    
    # add a colourbar
    fig.subplots_adjust(right=0.8)
    cbar_ax = fig.add_axes([0.85, 0.2, 0.04, 0.6])
    fig.colorbar(im, cax=cbar_ax)

    # plt.tight_layout()
    
    fig.savefig(fig_name)

# print(os.getcwd())
plot_inout_matrix(in_out_matrix, 
                  'figure/in_out_matrix.svg', 
                  "Proportion of Participant Choices Across Blocks",
                  "Block",
                  1
                )